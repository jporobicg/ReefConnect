#!/usr/bin/env python3
"""
Comprehensive Test: Verify the complete reorganized codebase
"""

import numpy as np
import tempfile
import os
from pathlib import Path

# Test all the reorganized modules
from ecological_processes import bathtub_curve, piecewise_decay, piecewise_competence, points_in_polygon
from spatial_metrics import veclength, angle, haversine, calculate_angles_and_distances
from main_connectivity_calculation import calc
from io_utils import load_config, load_shapefile_and_centroids, create_netcdf_output, verify_output_structure


def test_integration_simulation():
    """Test integration of all modules with simulated data."""
    print("="*60)
    print("TESTING COMPLETE INTEGRATION")
    print("="*60)
    
    # Load configuration
    config = load_config("config/connectivity_parameters.yaml")
    print(f"‚úÖ Configuration loaded successfully")
    
    # Test ecological processes with config parameters
    ages = [1.0, 2.0, 3.0, 4.0, 5.0]
    decay_params = config['decay']
    competence_params = config['competence']
    
    # Test decay function
    decay_result = piecewise_decay(
        ages, 
        decay_params['Tcp_decay'], 
        decay_params['lmbda1'], 
        decay_params['lmbda2'],
        decay_params['v1'], 
        decay_params['v2'], 
        decay_params['sigma1'], 
        decay_params['sigma2']
    )
    print(f"‚úÖ Decay calculation: {len(decay_result)} values computed")
    
    # Test competence function
    competence_result = piecewise_competence(
        ages,
        competence_params['tc'],
        competence_params['Tcp_comp'],
        competence_params['alpha'],
        competence_params['beta1'],
        competence_params['beta2'],
        competence_params['v']
    )
    print(f"‚úÖ Competence calculation: {len(competence_result)} values computed")
    
    # Test spatial metrics
    # Create mock reef centroids (simplified for testing)
    class MockCentroid:
        def __init__(self, lon, lat):
            self.coords = [[(lon, lat)]]
    
    reef_centroids = [
        MockCentroid(145.0, -16.0),
        MockCentroid(145.1, -16.1),
        MockCentroid(145.2, -16.2),
    ]
    
    angle_matrix, direction_matrix, distance_matrix = calculate_angles_and_distances(
        reef_centroids, len(reef_centroids)
    )
    print(f"‚úÖ Spatial metrics calculated for {len(reef_centroids)} reefs")
    print(f"   Sample distance: {distance_matrix[0, 1]:.2f} km")
    print(f"   Sample angle: {angle_matrix[0, 1]:.2f} degrees")
    print(f"   Sample direction: {direction_matrix[0, 1]}")
    
    # Test NetCDF creation with simulated data
    num_sources, num_sinks, num_samples = 3, 3, config['bootstrap']['n_repetitions']
    connectivity_data = np.random.exponential(0.1, (num_sources, num_sinks, num_samples))
    
    with tempfile.NamedTemporaryFile(suffix='.nc', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        create_netcdf_output(
            output_path, num_sources, num_sinks, num_samples,
            angle_matrix, distance_matrix, direction_matrix, connectivity_data
        )
        
        # Verify the output
        verification_result = verify_output_structure(
            output_path, num_sources, num_sinks, num_samples
        )
        assert verification_result, "NetCDF verification failed"
        print(f"‚úÖ NetCDF integration test passed")
        
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)
    
    return True


def test_bash_script_help():
    """Test the bash script help functionality."""
    print("\n" + "="*60)
    print("TESTING BASH SCRIPT HELP")
    print("="*60)
    
    # Test that we can call the script help
    import subprocess
    try:
        result = subprocess.run(['./run_connectivity.sh', '-h'], 
                              capture_output=True, text=True, timeout=10)
        assert result.returncode == 0, f"Script help failed with return code {result.returncode}"
        assert "Usage:" in result.stdout, "Script help doesn't contain usage information"
        print(f"‚úÖ Bash script help working correctly")
        print(f"   Help output contains {len(result.stdout.split())} words")
        return True
    except subprocess.TimeoutExpired:
        print("‚ùå Bash script help timed out")
        return False
    except Exception as e:
        print(f"‚ùå Bash script help failed: {e}")
        return False


def test_file_structure():
    """Test that all expected files exist in the correct structure."""
    print("\n" + "="*60)
    print("TESTING FILE STRUCTURE")
    print("="*60)
    
    expected_files = {
        'ecological_processes.py': 'Ecological processes module',
        'spatial_metrics.py': 'Spatial metrics module', 
        'main_connectivity_calculation.py': 'Main connectivity calculation module',
        'io_utils.py': 'IO utilities module',
        'config/connectivity_parameters.yaml': 'Configuration file',
        'run_connectivity.sh': 'Bash execution script',
        'original_code/matrix_calculations.py': 'Original matrix calculations',
        'original_code/angle.py': 'Original angle calculations',
        'original_code/get_kernels.py': 'Original kernel functions',
    }
    
    missing_files = []
    for file_path, description in expected_files.items():
        if not Path(file_path).exists():
            missing_files.append(f"{file_path} ({description})")
        else:
            print(f"‚úÖ {file_path} exists")
    
    if missing_files:
        print(f"‚ùå Missing files:")
        for missing in missing_files:
            print(f"   - {missing}")
        return False
    else:
        print(f"‚úÖ All {len(expected_files)} expected files exist")
        return True


def test_import_consistency():
    """Test that all modules can be imported without conflicts."""
    print("\n" + "="*60)
    print("TESTING IMPORT CONSISTENCY")
    print("="*60)
    
    try:
        # Test that we can import everything without circular dependencies
        import ecological_processes
        import spatial_metrics
        import main_connectivity_calculation
        import io_utils
        
        print("‚úÖ All modules imported successfully")
        
        # Test specific functions exist
        functions_to_check = [
            (ecological_processes, 'bathtub_curve'),
            (ecological_processes, 'piecewise_decay'),
            (ecological_processes, 'piecewise_competence'),
            (ecological_processes, 'points_in_polygon'),
            (spatial_metrics, 'veclength'),
            (spatial_metrics, 'angle'),
            (spatial_metrics, 'haversine'),
            (main_connectivity_calculation, 'calc'),
            (io_utils, 'load_config'),
            (io_utils, 'load_shapefile_and_centroids'),
            (io_utils, 'create_netcdf_output'),
        ]
        
        for module, func_name in functions_to_check:
            assert hasattr(module, func_name), f"Function {func_name} not found in {module.__name__}"
            print(f"‚úÖ {module.__name__}.{func_name} available")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import consistency test failed: {e}")
        return False


def main():
    """Run all comprehensive tests."""
    print("COMPREHENSIVE REORGANIZATION TESTING")
    print("="*80)
    print("Testing the complete reorganized codebase structure and integration")
    print("="*80)
    
    tests = [
        ("File structure", test_file_structure),
        ("Import consistency", test_import_consistency),
        ("Integration simulation", test_integration_simulation),
        ("Bash script help", test_bash_script_help),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"\nüéâ {test_name} test PASSED!")
                passed += 1
            else:
                print(f"\nüí• {test_name} test FAILED!")
                failed += 1
        except Exception as e:
            print(f"\nüí• {test_name} test FAILED with exception: {e}")
            failed += 1
    
    print("\n" + "="*80)
    print("COMPREHENSIVE TESTING COMPLETE")
    print("="*80)
    print(f"‚úÖ Tests passed: {passed}")
    print(f"‚ùå Tests failed: {failed}")
    
    if failed == 0:
        print("\nüéâ ALL TESTS PASSED! üéâ")
        print("="*80)
        print("‚úÖ Code reorganization completed successfully!")
        print("‚úÖ All modules are properly separated and functional")
        print("‚úÖ Configuration system is working")
        print("‚úÖ Bash script is ready for execution")
        print("‚úÖ Original logic is preserved in new structure")
        print("\nüöÄ READY TO PROCEED WITH PROCESS 1 IMPLEMENTATION!")
    else:
        print(f"\n‚ùå {failed} test(s) failed.")
        print("Please review and fix the issues before proceeding.")


if __name__ == "__main__":
    main() 